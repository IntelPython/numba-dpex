# SPDX-FileCopyrightText: 2020 - 2024 Intel Corporation
#
# SPDX-License-Identifier: Apache-2.0

import logging
import os

from numba.core import config


def _readenv(name, ctor, default):
    """Read/write values from/into system environment variable list.

    This function is used to read and write values from (and into) system `env`.
    This is adapted from `process_environ()` function of `_EnvLoader` class in
    `numba/core/config.py`.

    Args:
        name (str): The name of the env variable.
        ctor (type): The type of the env variable.
        default (int,float,str): The default value of the env variable.

    Returns:
        int,float,string: The environment variable value of the specified type.
    """

    value = os.environ.get(name)
    if value is None:
        return default() if callable(default) else default
    try:
        return ctor(value)
    except Exception:
        logging.exception(
            "env variable %s defined but failed to parse '%s'" % (name, value)
        )
        return default


def __getattr__(name):
    """__getattr__ for numba_dpex's config module.

    This will be used to fallback to numba's config.

    Args:
        name (str): The name of the env variable.

    Returns:
        int,float,str: The environment variable value from numba.
    """
    return getattr(config, name)


# To save intermediate files generated by th compiler
SAVE_IR_FILES = _readenv("NUMBA_DPEX_SAVE_IR_FILES", int, 0)

# Dump offload diagnostics
OFFLOAD_DIAGNOSTICS = _readenv("NUMBA_DPEX_OFFLOAD_DIAGNOSTICS", int, 0)

# Emit debug info
DEBUG = _readenv("NUMBA_DPEX_DEBUG", int, config.DEBUG)
# The default value for the `debug` flag
DEBUGINFO_DEFAULT = _readenv(
    "NUMBA_DPEX_DEBUGINFO", int, config.DEBUGINFO_DEFAULT
)

# Emit LLVM IR generated for kernel decorated function
DUMP_KERNEL_LLVM = _readenv("NUMBA_DPEX_DUMP_KERNEL_LLVM", int, 0)

# Emit LLVM module generated to launch a kernel decorated function
DUMP_KERNEL_LAUNCHER = _readenv("NUMBA_DPEX_DUMP_KERNEL_LAUNCHER", int, 0)

# Enables debug printf messages inside the kernel launcher module generated for
# a kernel decorated function
DEBUG_KERNEL_LAUNCHER = _readenv("NUMBA_DPEX_DEBUG_KERNEL_LAUNCHER", int, 0)

# Flag to enable caching, set NUMBA_DPEX_ENABLE_CACHE=0 to turn it off.
ENABLE_CACHE = _readenv("NUMBA_DPEX_ENABLE_CACHE", int, 1)
# To specify the default cache size, 20 by default.
CACHE_SIZE = _readenv("NUMBA_DPEX_CACHE_SIZE", int, 20)
# Enable debugging of cahcing mechanism, set 1 to turn it on.
DEBUG_CACHE = _readenv("NUMBA_DPEX_DEBUG_CACHE", int, 0)

# Flag to turn on the ConstantSizeStaticLocalMemoryPass in the kernel pipeline.
# The pass is turned off by default.
STATIC_LOCAL_MEM_PASS = _readenv("NUMBA_DPEX_STATIC_LOCAL_MEM_PASS", int, 0)

# Unused flags
TESTING_SKIP_NO_DPNP = _readenv("NUMBA_DPEX_TESTING_SKIP_NO_DPNP", int, 0)
TESTING_SKIP_NO_DEBUGGING = _readenv(
    "NUMBA_DPEX_TESTING_SKIP_NO_DEBUGGING", int, 1
)
TESTING_LOG_DEBUGGING = _readenv("NUMBA_DPEX_TESTING_LOG_DEBUGGING", int, DEBUG)
# Flag to turn on the ConstantSizeStaticLocalMemoryPass in the kernel pipeline.
# The pass is turned off by default.
STATIC_LOCAL_MEM_PASS = _readenv("NUMBA_DPEX_STATIC_LOCAL_MEM_PASS", int, 0)

DPEX_OPT = _readenv("NUMBA_DPEX_OPT", int, 2)

INLINE_THRESHOLD = _readenv("NUMBA_DPEX_INLINE_THRESHOLD", int, None)

USE_MLIR = _readenv("NUMBA_DPEX_USE_MLIR", int, 0)
