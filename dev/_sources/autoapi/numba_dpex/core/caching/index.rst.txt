
:orphan:

numba_dpex.core.caching
=======================

.. py:module:: numba_dpex.core.caching


Overview
--------

.. list-table:: Classes
   :header-rows: 0
   :widths: auto
   :class: summarytable

   * - :py:obj:`AbstractCache <numba_dpex.core.caching.AbstractCache>`
     - Abstract cache class to specify basic caching operations.
   * - :py:obj:`NullCache <numba_dpex.core.caching.NullCache>`
     - A dummy cache used if user decides to disable caching.
   * - :py:obj:`Node <numba_dpex.core.caching.Node>`
     - A 'Node' class for LRUCache.
   * - :py:obj:`LRUCache <numba_dpex.core.caching.LRUCache>`
     - LRUCache implementation for caching kernels,




Classes
-------

.. py:class:: AbstractCache

   Abstract cache class to specify basic caching operations.

   This class will be used to create an non-functional dummy cache
   (i.e. NullCache) and other functional cache. The dummy cache
   will be used as a placeholder when caching is disabled.

   :param metaclass: Metaclass for the abstract class.
                     Defaults to ABCMeta.
   :type metaclass: type, optional


   .. rubric:: Overview


   .. list-table:: Methods
      :header-rows: 0
      :widths: auto
      :class: summarytable

      * - :py:obj:`get <numba_dpex.core.caching.AbstractCache.get>`\ ()
        - :summarylabel:`abc` An abstract method to retrieve item from the cache.
      * - :py:obj:`put <numba_dpex.core.caching.AbstractCache.put>`\ (key, value)
        - :summarylabel:`abc` An abstract method to save item into the cache.


   .. rubric:: Members

   .. py:method:: get()
      :abstractmethod:

      An abstract method to retrieve item from the cache.


   .. py:method:: put(key, value)
      :abstractmethod:

      An abstract method to save item into the cache.

      :param key: The key for the data
                  (i.e. compiled kernel/function etc.).
      :type key: object
      :param value: The data (i.e. compiled kernel/function)
                    to be saved.
      :type value: object




.. py:class:: NullCache

   Bases: :py:obj:`AbstractCache`

   A dummy cache used if user decides to disable caching.

   If the caching is disabled this class will be used to
   perform all caching operations, all of which will be basically
   NOP. This idea is copied from numba.

   :param AbstractCache: The abstract cache from which all
   :type AbstractCache: class
   :param other caching classes will be derived.:


   .. rubric:: Overview


   .. list-table:: Methods
      :header-rows: 0
      :widths: auto
      :class: summarytable

      * - :py:obj:`get <numba_dpex.core.caching.NullCache.get>`\ (key)
        - Function to get an item (i.e. compiled kernel/function)
      * - :py:obj:`put <numba_dpex.core.caching.NullCache.put>`\ (key, value)
        - Function to save a compiled kernel/function


   .. rubric:: Members

   .. py:method:: get(key)

      Function to get an item (i.e. compiled kernel/function)
      from the cache

      :param key: The key to retrieve the
                  data (i.e. compiled kernel/function)
      :type key: object

      :returns: Returns None.
      :rtype: None


   .. py:method:: put(key, value)

      Function to save a compiled kernel/function
      into the cache.

      :param key: The key to the data (i.e. compiled kernel/function).
      :type key: object
      :param value: The data to be cached (i.e.
      :type value: object
      :param compiled kernel/function).:




.. py:class:: Node(key, value)

   A 'Node' class for LRUCache.




.. py:class:: LRUCache(name='cache', capacity=10, pyfunc=None)

   Bases: :py:obj:`AbstractCache`

   LRUCache implementation for caching kernels,
   functions and modules.

   The cache is basically a doubly-linked-list backed
   with a dictionary as a lookup table.


   .. rubric:: Overview


   .. list-table:: Methods
      :header-rows: 0
      :widths: auto
      :class: summarytable

      * - :py:obj:`size <numba_dpex.core.caching.LRUCache.size>`\ ()
        - Get the current size of the cache.
      * - :py:obj:`memsize <numba_dpex.core.caching.LRUCache.memsize>`\ ()
        - Get the total memory size of the cache.
      * - :py:obj:`clean <numba_dpex.core.caching.LRUCache.clean>`\ ()
        - Clean the cache
      * - :py:obj:`get <numba_dpex.core.caching.LRUCache.get>`\ (key)
        - Get the value associated with the key.
      * - :py:obj:`put <numba_dpex.core.caching.LRUCache.put>`\ (key, value)
        - Store the key-value pair into the cache.


   .. rubric:: Members

   .. py:method:: size()

      Get the current size of the cache.

      :returns: The current number of items in the cache.
      :rtype: int


   .. py:method:: memsize()

      Get the total memory size of the cache.

      This function might be useful in the future when
      size based (not count based) cache limit will be
      implemented.

      :returns: Get the total memory size of the cache in bytes.
      :rtype: int


   .. py:method:: clean()

      Clean the cache


   .. py:method:: get(key)

      Get the value associated with the key.

      :param key: A key for the lookup table.
      :type key: object

      :returns: The value associated with the key.
      :rtype: object


   .. py:method:: put(key, value)

      Store the key-value pair into the cache.

      :param key: The key for the data.
      :type key: object
      :param value: The data to be saved.
      :type value: object







