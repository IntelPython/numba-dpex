name: Conda package

on:
  push:
    branches:
      - main
      - release*
  pull_request:
    branches:
      - main
      - release*

env:
  PACKAGE_NAME: numba-dpex
  MODULE_NAME: numba_dpex
  # There is a separate action that removes defaults.
  CHANNELS: 'dppy/label/dev,conda-forge,intel'
  VER_JSON_NAME: 'version.json'
  VER_SCRIPT1: "import json; f = open('version.json', 'r'); j = json.load(f); f.close(); "
  VER_SCRIPT2: "d = j['numba-dpex'][0]; print('='.join((d[s] for s in ('version', 'build'))))"

jobs:
  build:
    name: Build ['${{ matrix.os }}', python='${{ matrix.python }}']

    strategy:
      fail-fast: false
      matrix:
        python: ['3.9', '3.10', '3.11']
        os: [ubuntu-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    defaults:
      run:
        shell: bash -l {0}

    continue-on-error: false

    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.11.0
        with:
          access_token: ${{ github.token }}

      - name: Checkout ${{ env.PACKAGE_NAME }} repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          python-version: ${{ inputs.python-version }}
          miniforge-variant: Mambaforge
          miniforge-version: latest
          activate-environment: "build"
          channels: ${{ env.CHANNELS }}
          channel-priority: "disabled"
          run-post: false

      - name: Disable defautls
        run: conda config --remove channels defaults

      - name: Store conda paths as envs
        run: echo "CONDA_BLD=$CONDA_PREFIX/conda-bld/${{ runner.os == 'Linux' && 'linux' || 'win' }}-64/" | tr "\\" '/' >> $GITHUB_ENV

      # boa is an extention to conda so we can use mamba resolver in conda build
      - name: Install conda-build
        run: mamba install boa

      - name: Build conda package
        run: conda mambabuild --no-test --python ${{ matrix.python }} conda-recipe

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PACKAGE_NAME }} ${{ runner.os }} Python ${{ matrix.python }}
          path: ${{ env.CONDA_BLD }}${{ env.PACKAGE_NAME }}-*.tar.bz2


  test:
    name: Test ['${{ matrix.os }}', python='${{ matrix.python }}']

    needs: build

    runs-on: ${{ matrix.os }}

    defaults:
      run:
        shell: ${{ matrix.os == 'windows-latest' && 'cmd /C CALL {0}' || 'bash -l {0}' }}

    strategy:
      fail-fast: false
      matrix:
        python: ['3.9', '3.10', '3.11']
        os: [ubuntu-20.04, ubuntu-latest, windows-latest]
        experimental: [false]

    continue-on-error: ${{ matrix.experimental }}

    steps:
      - name: Setup miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          python-version: ${{ matrix.python }}
          miniforge-variant: Mambaforge
          miniforge-version: latest
          activate-environment: "test"
          channels: ${{ env.CHANNELS }}
          channel-priority: "disabled"
          run-post: false

      - name: Checkout ${{ env.PACKAGE_NAME }} repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Disable defautls
        run: conda config --remove channels defaults

      - name: Store conda paths as envs
        shell: bash -l {0}
        run: |
          echo "CHANNEL_PATH=${{ github.workspace }}/channel/" | tr "\\" "/" >> $GITHUB_ENV
          echo "EXTRACTED_PKG_PATH=${{ github.workspace }}/pkg/" | tr "\\" "/" >> $GITHUB_ENV
          echo "VER_JSON_PATH=${{ github.workspace }}/version.json" | tr "\\" "/" >> $GITHUB_ENV
          echo "PKG_PATH_IN_CHANNEL=${{ github.workspace }}/channel/${{ runner.os == 'Linux' && 'linux' || 'win' }}-64/" | tr "\\" "/" >> $GITHUB_ENV
          echo "EXAMPLES_PATH=${{ github.workspace }}/examples/" | tr "\\" "/" >> $GITHUB_ENV

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.PACKAGE_NAME }} ${{ runner.os }} Python ${{ matrix.python }}
          path: ${{ env.PKG_PATH_IN_CHANNEL }}

      # We need --force-local because on windows path looks like C:/foo/bar
      # and tar interprits semicolons as remote device.
      - name: Extract package archive
        shell: bash -l {0}
        run: |
          mkdir -p ${EXTRACTED_PKG_PATH}
          tar -xvf ${PKG_PATH_IN_CHANNEL}${PACKAGE_NAME}-*.tar.bz2 -C ${EXTRACTED_PKG_PATH} --force-local

      - name: Install conda build
        run: |
          mamba install conda-build

      - name: Create conda channel
        run: |
          conda index ${{ env.CHANNEL_PATH }}

      - name: Test conda channel
        run: |
          mamba search ${{ env.PACKAGE_NAME }} -c ${{ env.CHANNEL_PATH }} --override-channels --info --json > ${{ env.VER_JSON_PATH }}
          cat ${{ env.VER_JSON_PATH }}

      - name: Collect dependencies
        shell: bash -l {0}
        run: |
          export PACKAGE_VERSION=$(python -c "${{ env.VER_SCRIPT1 }} ${{ env.VER_SCRIPT2 }}")
          echo "PACKAGE_VERSION=$PACKAGE_VERSION" >> $GITHUB_ENV

      # We want to make sure that all dependecies install automatically.
      - name: Install builded package
        run: mamba install ${{ env.PACKAGE_NAME }}=${{ env.PACKAGE_VERSION }} opencl_rt pytest -c ${{ env.CHANNEL_PATH }}

      - name: Setup OpenCL CPU device
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $script_path="$env:CONDA_PREFIX\Scripts\set-intel-ocl-icd-registry.ps1"
          &$script_path

      - name: List installed packages
        run: conda list

      - name: Check dpcpp-llvm-spirv
        run: |
          python -c "import dpcpp_llvm_spirv as p; print(p.get_llvm_spirv_path())"

      - name: Smoke test
        run: python -c "import dpnp, dpctl, numba_dpex; dpctl.lsplatform()"

      - name: Run tests
        run: |
          pytest -q -ra --disable-warnings --pyargs ${{ env.MODULE_NAME }} -vv

      - name: Run examples
        shell: bash -l {0}
        run: |
          cd ${{ env.EXAMPLES_PATH }}
          for script in $(find . \( -not -name "_*" -not -name "side-by-side*" -not -name "vectorize.py" -not -name "scan.py" -and -name "*.py" \))
          do
            echo "Executing ${script}"
            python ${script} || exit 1
          done

  upload_anaconda:
    name: Upload dppy/label/dev ['${{ matrix.os }}', python='${{ matrix.python }}']
    if: ${{github.ref == 'refs/heads/main' || (startsWith(github.ref, 'refs/heads/release') == true)}}

    needs: [test]

    strategy:
      matrix:
        python: ['3.9', '3.10', '3.11']
        os: [ubuntu-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    defaults:
      run:
        shell: bash -l {0}

    continue-on-error: false

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.PACKAGE_NAME }} ${{ runner.os }} Python ${{ matrix.python }}

      - name: Setup miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          python-version: ${{ matrix.python }}
          miniforge-variant: Mambaforge
          miniforge-version: latest
          activate-environment: "anaconda"
          channels: ${{ env.CHANNELS }}
          channel-priority: "disabled"
          run-post: false

      - name: Install anaconda-client
        run: mamba install anaconda-client

      - name: Upload
        run: anaconda --token ${{ secrets.ANACONDA_TOKEN }} upload --user dppy --label dev ${{ env.PACKAGE_NAME }}-*.tar.bz2
