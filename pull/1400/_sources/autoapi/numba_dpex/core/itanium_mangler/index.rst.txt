
:orphan:

numba_dpex.core.itanium_mangler
===============================

.. py:module:: numba_dpex.core.itanium_mangler

.. autoapi-nested-parse::

   Itanium CXX ABI Mangler

   Reference: https://itanium-cxx-abi.github.io/cxx-abi/abi.html

   The basics of the mangling scheme.

   We are hijacking the CXX mangling scheme for our use.  We map Python modules
   into CXX namespace.  A `module1.submodule2.foo` is mapped to
   `module1::submodule2::foo`.   For parameterized numba types, we treat them as
   templated types; for example, `array(int64, 1d, C)` becomes an
   `array<int64, 1, C>`.

   All mangled names are prefixed with "_Z".  It is followed by the name of the
   entity.  A name contains one or more identifiers.  Each identifier is encoded
   as "<num of char><name>".   If the name is namespaced and, therefore,
   has multiple identifiers, the entire name is encoded as "N<name>E".

   For functions, arguments types follow.  There are condensed encodings for basic
   built-in types; e.g. "i" for int, "f" for float.  For other types, the
   previously mentioned name encoding should be used.

   For templated types, the template parameters are encoded immediately after the
   name.  If it is namespaced, it should be within the 'N' 'E' marker.  Template
   parameters are encoded in "I<params>E", where each parameter is encoded using
   the mentioned name encoding scheme.  Template parameters can contain literal
   values like the '1' in the array type shown earlier.  There is special encoding
   scheme for them to avoid leading digits.



Overview
--------


.. list-table:: Function
   :header-rows: 0
   :widths: auto
   :class: summarytable

   * - :py:obj:`mangle_type_or_value <numba_dpex.core.itanium_mangler.mangle_type_or_value>`\ (typ)
     - Mangle type parameter and arbitrary value.
   * - :py:obj:`mangle_ext <numba_dpex.core.itanium_mangler.mangle_ext>`\ (ident, argtys, \*None, abi_tags)
     - Mangle identifier with Numba type objects and abi-tags.
   * - :py:obj:`mangle_abi_tag <numba_dpex.core.itanium_mangler.mangle_abi_tag>`\ (abi_tag)
     - \-
   * - :py:obj:`mangle_identifier <numba_dpex.core.itanium_mangler.mangle_identifier>`\ (ident, template_params, \*None, abi_tags, uid)
     - Mangle the identifier with optional template parameters and abi_tags.
   * - :py:obj:`mangle_type_c <numba_dpex.core.itanium_mangler.mangle_type_c>`\ (typ)
     - Mangle C type name
   * - :py:obj:`mangle_type_or_value_numba <numba_dpex.core.itanium_mangler.mangle_type_or_value_numba>`\ (typ)
     - Mangle type parameter and arbitrary value.
   * - :py:obj:`mangle_templated_ident <numba_dpex.core.itanium_mangler.mangle_templated_ident>`\ (identifier, parameters)
     - Mangle templated identifier.
   * - :py:obj:`mangle_args_c <numba_dpex.core.itanium_mangler.mangle_args_c>`\ (argtys)
     - Mangle sequence of C type names
   * - :py:obj:`mangle_args <numba_dpex.core.itanium_mangler.mangle_args>`\ (argtys)
     - Mangle sequence of Numba type objects and arbitrary values.
   * - :py:obj:`mangle_c <numba_dpex.core.itanium_mangler.mangle_c>`\ (ident, argtys)
     - Mangle identifier with C type names
   * - :py:obj:`mangle <numba_dpex.core.itanium_mangler.mangle>`\ (ident, argtys, \*None, abi_tags, uid)
     - Mangle identifier with Numba type objects and abi-tags.
   * - :py:obj:`prepend_namespace <numba_dpex.core.itanium_mangler.prepend_namespace>`\ (mangled, ns)
     - Prepend namespace to mangled name.


.. list-table:: Attributes
   :header-rows: 0
   :widths: auto
   :class: summarytable

   * - :py:obj:`PREFIX <numba_dpex.core.itanium_mangler.PREFIX>`
     - \-
   * - :py:obj:`C2CODE <numba_dpex.core.itanium_mangler.C2CODE>`
     - \-
   * - :py:obj:`N2C <numba_dpex.core.itanium_mangler.N2C>`
     - \-
   * - :py:obj:`mangle_type <numba_dpex.core.itanium_mangler.mangle_type>`
     - \-
   * - :py:obj:`mangle_value <numba_dpex.core.itanium_mangler.mangle_value>`
     - \-



Functions
---------
.. py:function:: mangle_type_or_value(typ)

   Mangle type parameter and arbitrary value.

   This function extends Numba's `magle_type_or_value()` to
   support numba.types.CPointer type, e.g. an ``int *`` argument will be
   mangled to "Pi".
   Mangling of extended qualifiers is supported only
   for address space qualifiers. In which case, the mangling
   follows the rule defined in Section 5.1.5.1 of the ``Itanium ABI
   <https://itanium-cxx-abi.github.io/cxx-abi/abi.html#mangle.qualified-type>``_.
   For example, an ``int global *`` argument will be mangeled to "PU3AS1i".

   :param typ: Type to mangle
   :type typ: numba.types, int, str

   :returns: The mangled name of the type
   :rtype: str


.. py:function:: mangle_ext(ident, argtys, *, abi_tags=())

   Mangle identifier with Numba type objects and abi-tags.


.. py:function:: mangle_abi_tag(abi_tag: str) -> str


.. py:function:: mangle_identifier(ident, template_params='', *, abi_tags=(), uid=None)

   Mangle the identifier with optional template parameters and abi_tags.

   Note:

   This treats '.' as '::' in C++.


.. py:function:: mangle_type_c(typ)

   Mangle C type name

   :param typ: C type name
   :type typ: str


.. py:function:: mangle_type_or_value_numba(typ)

   Mangle type parameter and arbitrary value.


.. py:function:: mangle_templated_ident(identifier, parameters)

   Mangle templated identifier.


.. py:function:: mangle_args_c(argtys)

   Mangle sequence of C type names


.. py:function:: mangle_args(argtys)

   Mangle sequence of Numba type objects and arbitrary values.


.. py:function:: mangle_c(ident, argtys)

   Mangle identifier with C type names


.. py:function:: mangle(ident, argtys, *, abi_tags=(), uid=None)

   Mangle identifier with Numba type objects and abi-tags.


.. py:function:: prepend_namespace(mangled, ns)

   Prepend namespace to mangled name.



Attributes
----------
.. py:data:: PREFIX
   :value: '_Z'

   

.. py:data:: C2CODE

   

.. py:data:: N2C

   

.. py:data:: mangle_type

   

.. py:data:: mangle_value

   



