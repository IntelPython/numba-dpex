

:orphan:

numba_dpex.kernel_api.barrier
=============================

.. py:module:: numba_dpex.kernel_api.barrier

.. autoapi-nested-parse::

   Python functions that simulate SYCL's group_barrier function.





Overview
--------

.. list-table:: Function
   :header-rows: 0
   :widths: auto
   :class: summarytable

   * - :py:obj:`group_barrier <numba_dpex.kernel_api.barrier.group_barrier>`\ (group, fence_scope)
     - Performs a barrier operation across all work-items in a work-group.




Functions
---------
.. py:function:: group_barrier(group: numba_dpex.kernel_api.index_space_ids.Group, fence_scope: numba_dpex.kernel_api.memory_enums.MemoryScope = MemoryScope.WORK_GROUP)

   Performs a barrier operation across all work-items in a work-group.

   The function is equivalent to the ``sycl::group_barrier`` function. It
   synchronizes work within a group of work-items. All the work-items
   of the group must execute the barrier call before any work-item
   continues execution beyond the barrier.

   The ``group_barrier`` performs a memory fence operation ensuring that memory
   accesses issued before the barrier are not re-ordered with those issued
   after the barrier. All work-items in group G execute a release fence prior
   to synchronizing at the barrier, all work-items in group G execute an
   acquire fence afterwards, and there is an implicit synchronization of these
   fences as if provided by an explicit atomic operation on an atomic object.

   .. important::
       The function is not implemented yet for pure CPython execution and is
       only supported in JIT compiled mode of execution.

   :param group: Indicates the work-group inside which the barrier is to
                 be executed.
   :type group: Group
   :param fence_scope: scope of any memory
                       consistency operations that are performed by the barrier.
   :type fence_scope: MemoryScope) (optional

   :raises NotImplementedError: When the function is called directly from Python.





