
:orphan:

numba_dpex.experimental.decorators
==================================

.. py:module:: numba_dpex.experimental.decorators

.. autoapi-nested-parse::

   The set of experimental decorators provided by numba_dpex that are not yet
   ready to move to numba_dpex.core.



Overview
--------


.. list-table:: Function
   :header-rows: 0
   :widths: auto
   :class: summarytable

   * - :py:obj:`kernel <numba_dpex.experimental.decorators.kernel>`\ (func_or_sig, \*\*options)
     - A decorator to define a kernel function.
   * - :py:obj:`device_func <numba_dpex.experimental.decorators.device_func>`\ (func_or_sig, \*\*options)
     - Generates a function with a device-only calling convention, e.g.,




Functions
---------
.. py:function:: kernel(func_or_sig=None, **options)

   A decorator to define a kernel function.

   A kernel function is conceptually equivalent to a SYCL kernel function, and
   gets compiled into either an OpenCL or a LevelZero SPIR-V binary kernel.
   A kernel decorated Python function has the following restrictions:

       * The function can not return any value.
       * All array arguments passed to a kernel should adhere to compute
         follows data programming model.


.. py:function:: device_func(func_or_sig=None, **options)

   Generates a function with a device-only calling convention, e.g.,
   spir_func for SPIR-V based devices.

   The decorator is used to compile overloads in the DpexKernelTarget and
   users should use the decorator to define functions that are only callable
   from inside another device_func or a kernel.

   A device_func is not compiled down to device binary IR and instead left as
   LLVM IR. It is done so that the function can be inlined fully into the
   kernel module from where it is used at the LLVM level, leading to more
   optimization opportunities.

   :returns: A KernelDispatcher instance with the
             _compilation_mode option set to DEVICE_FUNC.
   :rtype: KernelDispatcher





