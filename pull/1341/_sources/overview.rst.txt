.. _overview:
.. include:: ./ext_links.txt

Overview
========

Data Parallel Extension for Numba* (`numba-dpex`_) is a free and open-source
LLVM-based code generator for portable accelerator programming in Python.
numba_dpex defines a new kernel programming domain-specific language (DSL) in
pure Python called `KAPI` that is modeled after the C++ embedded DSL `SYCL*`_. A
KAPI function can be JIT compiled by numba-dpex to generate a "data-parallel"
kernel function that executes in parallel on a supported device. Currently,
compilation of KAPI is possible for x86 CPU devices (using OpenCL CPU drivers),
Intel Gen9 integrated GPUs, Intel UHD integrated GPUs, and Intel discrete GPUs.

The following example presents an example that uses KAPI to code a pairwise
distance computation.

.. code-block:: python

    from numba_dpex import kernel_api as kapi
    import math
    import numpy as np


    def pairwise_distance_kernel(item: kapi.Item, data, distance):
        i = item.get_id(0)
        j = item.get_id(1)

        data_dims = data.shape[1]

        d = data.dtype.type(0.0)
        for k in range(data_dims):
            tmp = data[i, k] - data[j, k]
            d += tmp * tmp

        distance[j, i] = math.sqrt(d)


    data = np.random.ranf((10000, 3)).astype(np.float32)
    dist = np.empty(shape=(data.shape[0], data.shape[0]), dtype=np.float32)
    exec_range = kapi.Range(data.shape[0], data.shape[0])
    kapi.call_kernel(pairwise_distance_kernel, exec_range, data, dist)

The ``pairwise_distance_kernel`` function is conceptually a "data-parallel"
function that gets executed individually by a set of "work items". That is, each
work item runs the same function for a subset of the elements of the input
**data** and **distance** arrays. For programmers familiar with the CUDA or
OpenCL languages, it is the programming model referred to as Single Program
Multiple Data (SPMD). Although a KAPI function is conceptually following the
SPMD model, as Python has no concept of a work item a KAPI function
runs sequentially in Python and needs to be JIT compiled for parallel execution.

JIT compiling a KAPI function only requires adding the ``dpex.kernel`` decorator
to the function and calling the function from the ``dpex.call_kernel`` method.
It should be noted that a JIT compiled KAPI function does not support passing in
NumPy arrays. A KAPI function can only be called using either ``dpnp.ndarray``
or ``dpctl.tensor.usm_ndarray`` array objects. The restriction is due to a
compiled KAPI function requiring memory that was allocated on the device where
the kernel should execute. Refer the :doc:`programming_model` and kernel
programming user guide for further details. The modification to
``pairwise_distance_kernel`` function for JIT compilation are shown in the next
example.

.. code-block:: python

    from numba_dpex import kernel_api as kapi
    import numba_dpex as dpex
    import math
    import dpnp


    @dpex.kernel
    def pairwise_distance_kernel(item: kapi.Item, data, distance):
        i = item.get_id(0)
        j = item.get_id(1)

        data_dims = data.shape[1]

        d = data.dtype.type(0.0)
        for k in range(data_dims):
            tmp = data[i, k] - data[j, k]
            d += tmp * tmp

        distance[j, i] = math.sqrt(d)


    data = dpnp.random.ranf((10000, 3)).astype(dpnp.float32)
    dist = dpnp.empty(shape=(data.shape[0], data.shape[0]), dtype=dpnp.float32)
    exec_range = kapi.Range(data.shape[0], data.shape[0])
    dpex.call_kernel(pairwise_distance_kernel, exec_range, data, dist)

``numba-dpex`` is an open-source project and can be installed as part of `Intel
AI Analytics Toolkit`_ or the `Intel Distribution for Python*`_. The package is
also available on Anaconda cloud, PyPi, and as a Docker image on GitHub.
Refer the :doc:`getting_started` page for further details.
