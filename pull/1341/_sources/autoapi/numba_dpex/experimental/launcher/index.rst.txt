
:orphan:

numba_dpex.experimental.launcher
================================

.. py:module:: numba_dpex.experimental.launcher

.. autoapi-nested-parse::

   Provides a helper function to call a numba_dpex.kernel decorated function
   from either CPython or a numba_dpex.dpjit decorated function.



Overview
--------

.. list-table:: Classes
   :header-rows: 0
   :widths: auto
   :class: summarytable

   * - :py:obj:`LLRange <numba_dpex.experimental.launcher.LLRange>`
     - Analog of Range and NdRange but for the llvm ir values.


.. list-table:: Function
   :header-rows: 0
   :widths: auto
   :class: summarytable

   * - :py:obj:`wrap_event_reference_tuple <numba_dpex.experimental.launcher.wrap_event_reference_tuple>`\ (ctx, builder, event1, event2)
     - Creates tuple data model from two event data models, so it can be
   * - :py:obj:`call_kernel <numba_dpex.experimental.launcher.call_kernel>`\ (kernel_fn, index_space, \*kernel_args)
     - Calls a numba_dpex.kernel decorated function from CPython or from another
   * - :py:obj:`call_kernel_async <numba_dpex.experimental.launcher.call_kernel_async>`\ (kernel_fn, index_space, dependent_events, \*kernel_args)
     - Calls a numba_dpex.kernel decorated function from CPython or from another



Classes
-------

.. py:class:: LLRange

   Bases: :py:obj:`NamedTuple`

   Analog of Range and NdRange but for the llvm ir values.


   .. rubric:: Overview

   .. list-table:: Attributes
      :header-rows: 0
      :widths: auto
      :class: summarytable

      * - :py:obj:`global_range_extents <numba_dpex.experimental.launcher.LLRange.global_range_extents>`
        - \-
      * - :py:obj:`local_range_extents <numba_dpex.experimental.launcher.LLRange.local_range_extents>`
        - \-



   .. rubric:: Members

   .. py:attribute:: global_range_extents
      :type: list

      

   .. py:attribute:: local_range_extents
      :type: list

      



Functions
---------
.. py:function:: wrap_event_reference_tuple(ctx, builder, event1, event2)

   Creates tuple data model from two event data models, so it can be
   boxed to Python.


.. py:function:: call_kernel(kernel_fn, index_space, *kernel_args) -> None

   Calls a numba_dpex.kernel decorated function from CPython or from another
   dpjit function. Kernel execution happens in synchronous way, so the thread
   will be blocked till the kernel done execution.

   :param kernel_fn: A
   :type kernel_fn: numba_dpex.experimental.KernelDispatcher
   :param numba_dpex.kernel decorated function that is compiled to a:
   :param KernelDispatcher by numba_dpex.:
   :param index_space: A numba_dpex.Range or numba_dpex.NdRange
   :type index_space: Range | NdRange
   :param type object that specifies the index space for the kernel.:
   :param kernel_args: List of objects that are passed to the numba_dpex.kernel
   :param decorated function.:


.. py:function:: call_kernel_async(kernel_fn, index_space, dependent_events: list[dpctl.SyclEvent], *kernel_args) -> tuple[dpctl.SyclEvent, dpctl.SyclEvent]

   Calls a numba_dpex.kernel decorated function from CPython or from another
   dpjit function. Kernel execution happens in asynchronous way, so the thread
   will not be blocked till the kernel done execution. That means that it is
   user responsibility to properly use any memory used by kernel until the
   kernel execution is completed.

   :param kernel_fn: A
   :type kernel_fn: numba_dpex.experimental.KernelDispatcher
   :param numba_dpex.kernel decorated function that is compiled to a:
   :param KernelDispatcher by numba_dpex.:
   :param index_space: A numba_dpex.Range or numba_dpex.NdRange
   :type index_space: Range | NdRange
   :param type object that specifies the index space for the kernel.:
   :param kernel_args: List of objects that are passed to the numba_dpex.kernel
   :param decorated function.:

   :returns: pair of host event and device event. Host event represent host task
             that releases use of any kernel argument so it can be deallocated.
             This task may be executed only after device task is done.





