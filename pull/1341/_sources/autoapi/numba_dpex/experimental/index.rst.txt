
numba_dpex.experimental
=======================

.. py:module:: numba_dpex.experimental

.. autoapi-nested-parse::

   Contains experimental features that are meant as engineering preview and not
   yet production ready.



Overview
--------


.. list-table:: Function
   :header-rows: 0
   :widths: auto
   :class: summarytable

   * - :py:obj:`device_func <numba_dpex.experimental.device_func>`\ (func_or_sig, \*\*options)
     - Generates a function with a device-only calling convention, e.g.,
   * - :py:obj:`kernel <numba_dpex.experimental.kernel>`\ (func_or_sig, \*\*options)
     - A decorator to define a kernel function.
   * - :py:obj:`call_kernel <numba_dpex.experimental.call_kernel>`\ (kernel_fn, index_space, \*kernel_args)
     - Calls a numba_dpex.kernel decorated function from CPython or from another
   * - :py:obj:`call_kernel_async <numba_dpex.experimental.call_kernel_async>`\ (kernel_fn, index_space, dependent_events, \*kernel_args)
     - Calls a numba_dpex.kernel decorated function from CPython or from another




Functions
---------
.. py:function:: device_func(func_or_sig=None, **options)

   Generates a function with a device-only calling convention, e.g.,
   spir_func for SPIR-V based devices.

   The decorator is used to compile overloads in the DpexKernelTarget and
   users should use the decorator to define functions that are only callable
   from inside another device_func or a kernel.

   A device_func is not compiled down to device binary IR and instead left as
   LLVM IR. It is done so that the function can be inlined fully into the
   kernel module from where it is used at the LLVM level, leading to more
   optimization opportunities.

   :returns: A KernelDispatcher instance with the
             _compilation_mode option set to DEVICE_FUNC.
   :rtype: KernelDispatcher


.. py:function:: kernel(func_or_sig=None, **options)

   A decorator to define a kernel function.

   A kernel function is conceptually equivalent to a SYCL kernel function, and
   gets compiled into either an OpenCL or a LevelZero SPIR-V binary kernel.
   A kernel decorated Python function has the following restrictions:

       * The function can not return any value.
       * All array arguments passed to a kernel should adhere to compute
         follows data programming model.


.. py:function:: call_kernel(kernel_fn, index_space, *kernel_args) -> None

   Calls a numba_dpex.kernel decorated function from CPython or from another
   dpjit function. Kernel execution happens in synchronous way, so the thread
   will be blocked till the kernel done execution.

   :param kernel_fn: A
   :type kernel_fn: numba_dpex.experimental.KernelDispatcher
   :param numba_dpex.kernel decorated function that is compiled to a:
   :param KernelDispatcher by numba_dpex.:
   :param index_space: A numba_dpex.Range or numba_dpex.NdRange
   :type index_space: Range | NdRange
   :param type object that specifies the index space for the kernel.:
   :param kernel_args: List of objects that are passed to the numba_dpex.kernel
   :param decorated function.:


.. py:function:: call_kernel_async(kernel_fn, index_space, dependent_events: list[dpctl.SyclEvent], *kernel_args) -> tuple[dpctl.SyclEvent, dpctl.SyclEvent]

   Calls a numba_dpex.kernel decorated function from CPython or from another
   dpjit function. Kernel execution happens in asynchronous way, so the thread
   will not be blocked till the kernel done execution. That means that it is
   user responsibility to properly use any memory used by kernel until the
   kernel execution is completed.

   :param kernel_fn: A
   :type kernel_fn: numba_dpex.experimental.KernelDispatcher
   :param numba_dpex.kernel decorated function that is compiled to a:
   :param KernelDispatcher by numba_dpex.:
   :param index_space: A numba_dpex.Range or numba_dpex.NdRange
   :type index_space: Range | NdRange
   :param type object that specifies the index space for the kernel.:
   :param kernel_args: List of objects that are passed to the numba_dpex.kernel
   :param decorated function.:

   :returns: pair of host event and device event. Host event represent host task
             that releases use of any kernel argument so it can be deallocated.
             This task may be executed only after device task is done.





